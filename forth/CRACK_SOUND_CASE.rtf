{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww19840\viewh15800\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
HOW TO DECODE THE SOUND LOGIC IN JOT:\
=====================================\
OBSERVE THE BEHAVIOR:\
- NOT ALL SOUNDS ARE ENABLED UPON BOOT.  PRESS CONTROL-N TO CHANGE SOUND MODE.\
  THE KEYPRESS SOUND IS MUTED UNLESS THE USER CHANGES THE SOUND MODE.\
  MODES: 8 SOUNDS, 6 SOUNDS, 3 SOUNDS, ALL MUTE\
- VARIABLE MUFF (WHICH MEANS \'93MUFFLED\'94) IS AT 27719 (MUFF .)\
- SET SOUND MODE TO 8 SOUNDS, THEN LISTEN TO EACH SOUND\
- READ THE CODE, LOOK AT CODE FOR CONTROL STRUCTURES, WRITE PSEUDO CODE\
\
FIRST, NEED TO PORT THE \'93SWEEP\'94 SOUND ASSEMBLY CODE (WHICH IS SELF-MODIFYING):\
ONE OF THE MODIFIED ADDRESSES WILL HAVE \'93C030\'94 TO CLICK THE SPEAKER\
DEPENDING ON WHETHER YOU WANT TO SWEEP UP OR DOWN.\
\
6B09 : SWEEP 6B13\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f1\fs22 \cf0 \kerning1\expnd0\expndtw0 \
6B13-   A9 04       LDA   #$04\
6B15-   20 E0 08    JSR   $08E0\
6B18-   86 E0       STX   $E0\
6B1A-   A5 D1       LDA   $D1\
6B1C-   8D 56 6B    STA   $6B56			* SELF MODIFIES 4TH LDA ADDRESS BELOW - LO BYTE\
6B1F-   A5 D2       LDA   $D2\
6B21-   8D 57 6B    STA   $6B57			* SELF MODIFIES 4TH LDA ADDRESS BELOW - HI BYTE\
6B24-   A5 D3       LDA   $D3\
6B26-   8D 38 6B    STA   $6B38			* SELF MODIFIES 1ST LDA ADDRESS BELOW - LO BYTE\
6B29-   A5 D4       LDA   $D4\
6B2B-   8D 39 6B    STA   $6B39			* SELF MODIFIES 1ST LDA ADDRESS BELOW - HI BYTE\
6B2E-   A2 00       LDX   #$00\
6B30-   88          DEY\
6B31-   D0 0A       BNE   $6B3D\
6B33-   A4 D7       LDY   $D7\
6B35-   E6 D5       INC   $D5\
6B37-   AD FF FF    LDA   $FFFF			<= GETS SELF MODIFIED\
6B3A-   4C 47 6B    JMP   $6B47\
6B3D-   A5 D1       LDA   $D1\
6B3F-   E6 D1       INC   $D1\
6B41-   AD FF FF    LDA   $FFFF			* NOT MODIFIED, BUT HARMLESS\
6B44-   4C 47 6B    JMP   $6B47\
6B47-   CA          DEX\
6B48-   D0 11       BNE   $6B5B\
6B4A-   A6 D5       LDX   $D5\
6B4C-   C6 D7       DEC   $D7\
6B4E-   D0 05       BNE   $6B55\
6B50-   A6 E0       LDX   $E0\
6B52-   4C B8 08    JMP   $08B8\
6B55-   AD 30 C0    LDA   $C030			<= GETS SELF MODIFIED\
6B58-   4C 67 6B    JMP   $6B67\
6B5B-   A5 D1       LDA   $D1\
6B5D-   C6 D1       DEC   $D1\
6B5F-   D0 00       BNE   $6B61\
6B61-   AD FF FF    LDA   $FFFF			* NOT MODIFIED, BUT HARMLESS\
6B64-   4C 67 6B    JMP   $6B67\
6B67-   4C 30 6B    JMP   $6B30\
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\
CONVERT TO MAD APPLE FORTH USING ERIC\'92S OBJECT ORIENTED MACHINE LANGUAGE STRUCTURE:\
(WHERE YOU CAN BUILD OBJECTS, WITHOUT ENFORCEMENT OF OO CONSTRAINTS - CAVEAT EMPTOR)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 -----------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf0 \
WORDS ERIC ADDED TO MAD APPLE FORTH ASSEMBLER (FORTHASS.EXE):\
\
OBJECT	( #PARAMBYTES -- ) DEFINE A NEW WORD AS A MACHINE LANGUAGE OBJECT\
'PARM	(  \'97 )- GET ADDRESS OF A PARAMETER NUMBER FOR AN OBJECT WORD\
L        \
LL\
DUMP\
EXEC"     \
TYPE"\
SAVE"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\fs32 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf0 ASSEMBLER ok\
WORDS\
Mad Apple Forth Prodos v1.0\
PARM      OBJ-CALL  OBJ-END   OBJ-EXIT\
OBJ-CODE  OBJ-HEADER          PARMLEN\
CODEADRS  END-CODE  REPEAT,   WHILE,\
UNTIL,    BEGIN,    ELSE,     THEN,\
IF,       VS        0<        0=\
CS        NOT       BIT,      JMP,\
JSR,      STY,      LDY,      LDX,\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\fs32 \cf0 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
HEX\
8 OBJECT SWEEP			\\ DEFINE AN OBJECT WITH 8 BYTES RESERVED FOR IN/OUT PARAMETERS\
  BOT LDA,				\\ GET VALUES FROM FORTH STACK\
  8 PARM STA,			\\ STORE THEM IN PARAMETER AREA\
  BOT 1+ LDA,\
  7 PARM STA,\
  BOT 2 + LDA,\
  6 PARM STA,\
  BOT 3 + LDA,\
  5 PARM STA,\
  BOT 4 + LDA,\
  4 PARM STA,\
  BOT 5 + LDA,\
  3 PARM STA,\
  BOT 6 + LDA,\
  2 PARM STA,\
  BOT 7 + LDA,\
  1 PARM STA,\
  INX, INX, INX, INX, INX, INX, INX, INX, 	\\ ADJUST STACK POINTER FOR THE 8 BYTES READ\
OBJ-CODE\
  8 PARM LDA,			\\ OBJECT USES PARAMETERS RECEIVED TO SELF-MODIFY THE CODE\
  8 PARM 80 + STA,\
  7 PARM LDA,\
  8 PARM 81 + STA,\
  6 PARM LDA,\
  8 PARM 60 + STA,\
  5 PARM LDA,\
  8 PARM 61 + STA,\
  0 # LDX,\
  DEY,					\\ TOP OF SOUND LOOP\
  D0 C, 0C C,			\\ HARDCODING BRANCHES - (HIGHER LEVEL CONTROL STRUCTURES ARE AVAILABLE)\
  2 PARM LDY,			\\ NOTE: FORTH 1.7 VERSION USES ZERO PAGE, SO NOT CYCLE ACCURATE\
  4 PARM INC,			\\ IT CAN BE DONE BY SAVING AND RESTORING ZP BEFORE AND AFTER THE CALL.\
  FFFF LDA,				\\ *** THIS ADDRESS GETS SELF-MODIFIED\
  8 PARM 71 + JMP,		\\ HARDCODING JUMPS SO CODE CAN SOMEWHAT MATCH THE DISASSEMBLY\
  8 PARM LDA,\
  8 PARM INC,\
  EEEE LDA,				\
  8 PARM 71 + JMP,\
  DEX,					\
  D0 C, 11 C,\
  4 PARM LDX,\
  2 PARM DEC,\
  D0 C, 03 C,\
  8 PARM 96 + JMP,\
  BBBB LDA,				\
  8 PARM 93 + JMP,\
  8 PARM LDA,\
  8 PARM DEC,\
  D0 C, 00 C,			\\ BRANCH TO NEXT INSTRUCTION\
  AAAA LDA,				\\ *** THIS ADDRESS GETS SELF-MODIFIED\
  8 PARM 93 + JMP,		\\ JUMP TO NEXT INSTRUCTION\
  8 PARM 56 + JMP,		\\ REPEAT LOOP\
OBJ-END					\\ GENERATES LOGIC TO RETURN TO FORTH\
\
\
\
THEN DECODE THE CASE STRUCTURE IN THE (SOUND) WORD:\
\
6C6A : (SOUND) 					\\ SOUND NUMBER (1-5) COMES IN ON THE STACK\
DUP MUFF @ < 0BRANCH 00AA			\\ DETERMINE IF SOUND SHOULD BE MADE OR NOT (MUFFLED)\
0 SWAP SDUP 						\\ SWITCH - CASE STRUCTURE.  STACK HAS 0, SOUND#, SOUND#\
\
0 = EH? 0BRANCH 000C 				\\ IF SOUND# NOT 0 SKIP TO NEXT CHECK\
  LIT 0007 EMIT BRANCH 008C 			\\ BEEP AND JUMP TO END OF CASE STRUCTURE\
\
1 = EH? 0BRANCH 000A 				\\ IF SOUND# NOT 1 SKIP TO NEXT CHECK\
  CLUCK 1+ BRANCH 007A 				\\ SOUND 1 IS A CLUCK\
\
2 = EH? 0BRANCH 000A \
  CLACK 1+ BRANCH 0068 				\\ SOUND 2 IS A CLACK\
\
3 = EH? 0BRANCH 000E \
  0 2 UP- SWEEP BRANCH 0052 			\\ SOUND 3 IS A SWEEP UP\
\
LIT 0004 = EH? 0BRANCH 0010 \
  LIT 0046 1 UP- SWEEP BRANCH 0038 	\\ SOUND 4 IS A SHORT SWEEP UP\
\
LIT 0005 = EH? 0BRANCH 000E \
  0 2 DWN- SWEEP BRANCH 0020 		\\ SOUND 5 IS A SWEEP DOWN\
\
DROP LIT 0005 LIT 0014 OSC 		\\ SOUNDS 6 AND 7 START WITH THIS OSCILLATOR\
\
LIT 0007 = 0BRANCH 0008 			\\ SKIP IF NOT SOUND 7\
  PAUSE CLUCK 1+ 1+ 					\\ SOUND 7 ADDS A CLUCK\
\
BRANCH 0006 						\\ CASES 0-7 END UP HERE AND JUMP TO THE EXIT\
DROP 0 								\\ MUFFLED SOUNDS GO HERE- CLEAN UP STACK		\
;S							\
\
RELATED WORDS:\
==============\
618E : DEFAULT 					\\ NO MATCH FOUND IN A CASE STATEMENT \
CASES @ \
DUP 0BRANCH 0010 \
0 (DO) THEN (LOOP) FFFC \
BRANCH 0004 \
DROP\
LIT 0005 ?PAIRS CASES ! ;S\
\
\\ ANOTHER FORM OF THE CASE STATEMENT THAT USES EH?> INSTEAD OF EH?\
6176 : CASE> \
1 CASES +! \
COMPILE EH?> \
IF \
;S\
\
615F : CASE \
1 CASES +! 		\\ INCREMENT NUMBER OF CASES\
COMPILE EH? 	\\ ADD LOGIC TO EVALUATE CASE VALUE\
IF 				\\ DO SUBSEQUENT LOGIC ONLY IF CASE MATCHES\
;S				\\ SHOULD HAVE A \'93THEN\'94 AT THE END OF THAT LOGIC\
\
6140 : SWITCH 	\\ NEW SWITCH-CASE STRUCTURE\
	CASES @ 	\\ GET PREVIOUS NUMBER OF CASES ON STACK\
	0 CASES ! 	\\ ZERO OUT THE NUMBER OF CASES\
	LIT 0005 	\\ PUT A 5 ON THE STACK (STATE PARAMETER?)\
	COMPILE SDUP \\ ADD A DUP TO THE WORD BEING COMPILED\
	;S\
\
\\ ANOTHER FORM OF THE EH? STATEMENT\
6127 : EH?> 	\\ COMPILED BY CASE TO EVALUATE THE CONDITION\
0BRANCH 0008 	\\ IF FALSE, SKIP TO THE DUP BELOW \
1 				\\ DOES NOT DROP INCOMING VALUE FROM THE STACK - SEE EH? BELOW\
BRANCH 0006 	\\ EXIT\
DUP \
0 \
;S\
\
610D : EH? 		\\ COMPILED BY CASE TO EVALUATE THE CONDITION\
0BRANCH 000A	\\ IF FALSE, SKIP TO THE DUP BELOW \
DROP 1 			\\ IF TRUE, REPLACE WITH 1\
BRANCH 0006 	\\ EXIT\
DUP \
0 \
;S\
\
6100 : SDUP DUP ;S		\\ SYNONYM FOR DUP - COMPILED BY SWITCH\
\
60F4 : CASES 0F21		\\ A VARIABLE THAT COUNTS THE NUMBER OF CASES\
\
}